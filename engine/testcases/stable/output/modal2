
INPUT TEXT:
John can have a card.
John is a customer.
If someone can have a card and is a customer then he/she must wait.
Every clerk must have a card.
Bill is a clerk.

RULES:
can([pred_mod(have, v('John'), v(0), []), object(v(0), card, countable, na, eq, 1)]).
group([must([pred_mod(wait, A, [])])]) <- [can([pred_mod(have, A, B, []), object(B, card, countable, na, eq, 1)]), object(A, C, D, E, F, G), object(A, customer, countable, na, eq, 1)].
group([must([pred_mod(have, A, gv(0), []), object(gv(0), card, countable, na, eq, 1)])]) <- [object(A, clerk, countable, na, eq, 1)].
object(v('Bill'), 'Bill', named, na, eq, 1).
object(v('Bill'), clerk, countable, na, eq, 1).
object(v('John'), 'John', named, na, eq, 1).
object(v('John'), customer, countable, na, eq, 1).

SIMPLE RULES:
can([have('John', v(0), []), card(v(0))]).
must(wait(A, [])) <- [can([have(A, B, []), card(B)]), something(A), customer(A)].
must([have(A, gv(0), []), card(gv(0))]) <- [clerk(A)].
clerk('Bill').
customer('John').

ANSWERSET #1:
object(v('Bill'), 'Bill', named, na, eq, 1).
object(v('Bill'), clerk, countable, na, eq, 1).
object(v('John'), 'John', named, na, eq, 1).
object(v('John'), customer, countable, na, eq, 1).
group([must([pred_mod(wait, v('John'), [])])]).
group([must([pred_mod(have, v('Bill'), gv(0), []), object(gv(0), card, countable, na, eq, 1)])]).
can([pred_mod(have, v('John'), v(0), []), object(v(0), card, countable, na, eq, 1)]).

ANSWERTEXT #1:
John is a customer.
Bill is a clerk.
It is necessary that John waits.
It is necessary that Bill has a card.
It is possible that John has a card.

